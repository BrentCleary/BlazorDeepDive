Blazor Server Application Notes - 08-02-25
https://www.udemy.com/course/blazor-deep-dive-from-beginner-to-advanced/learn/lecture/42460400#overview


LESSON 4

app.Run() - This runs the application in a loop, listening for httpRequests coming in


app.UseHttpsRedirection();

app.UserStaticFiles();
app.UseAntiforgery();

app.MapRazorComponents<App>();

When an httprequest comes in, these functions (called middleware) add things to the request or handles the request with certain functionality


app.MapRazorComponents<App>(); - This maps the HTTP request to the <App> Class


App.razor is a plain html page, except that it has a 
<Routes /> 	   Component
<HeadOutlet /> Component


All Requests that come into the app are routed to the <App> Class component.
It is the Root component of the application
This is the "Single Page" of the Single Page Framework of Blazor

This page now uses the 
<Routes /> component
To find corresponding components, and place them in the <App>.razor body


Routes.razor hols the <Router> Component
The <Router> Component finds the Component you have requested and applies the Master Layout, which produces a final HTML Result, and returns it to the App.Razor


***** ----- .razor means any file this extension is a razor component ----- *****

PROCESS ROUTE

HTTPS Request Mapped to App.razor
App.Razor HTML calls Routes.Razor
Routes.Razor uses <Router> Component to find the requested Component ("Weather", "Other")
	Applies MainLayout to the Page Component
	Component fills in the @Body part of the MainLayout
This is returned to the App.Razor component and displayed


LESSON 5: Link to the Source Code


LESSON 6: Two Types of Components

Two Types of Components

	- Routable Component - This component acts like page.
		These components can be located by the <Router /> component and palced in the Root Component (App.razor)
		The single most important thing making a Component Routable
			@page "/servers" directive is on the top


	- Non-Routable Component (Reusable Component)
		Can be used inside of each Routable component
		Can be used inside of other Non-Routable Components

		These will be called "Controls" and stored in the Controls folder in this course


	- _Layout.razor - This is the application wide @using reference. Placing the folder directory in this will allow all apps to access the contained components without referencing the entire namespace or importing the using reference on each page or component.


08/02/25 - 1:13
Lesson 7 -Razor Syntax Implicit Razor Expression

 - This lesson covers creating and referncing model and information.
 - Models folder created
 - Server model created with ServerID, Name, City, IsOnline created
 - Server Initialization properties set to make IsOnline correlate to a random number (0, 1) that is set when instantiated
 - Server 1 instance created in Routable Server Component Page
 - Server 1 properties set to display in Non-Routable Server Component.
	Server 1 properties set to attributes of HTML element properties (div data-name="server.Name")

08/02/25 - 1:49
Lesson 8 - Explicit Razor Expression
	- Explicit Razor expression allow for complex .net code to be run in html
		style="@($"color:{(server.IsOnline ? "green":"red")}")"

08/03/25 - 2:07
Lesson 9 - Create a static data Repository
	- .txt file of basic Server Class List
		- Server Crud operations included
			- Spelling error in GetServres() method, not corrected by instructor yet
	- Covering of importated methods for Server repository
	- Short video

08/03/25 - 08/02/25 2:20
Lesson 10 - Razor Syntax Output list with looping

08/02/25 - 2:34
Lesson 11 - Assignment - Loop over CitiesRepository to generate button list
	- Copy CitiesRepository Class from video. No .txt provided. Very simple and short.
	- Create a state variable in the Non-Routable Compononent Servers
	- Loop over the cities list and place the @city in a <button> tag

08/02/25 - 3:05
Lesson 12 - Assignment 1: Answer


08/03/25 - 10:12 
Lesson 13 - Working with Static Resources
	- Static Resources are mapped directly to the resource, not the components that are routed or called
	- App Object configures the middleware pipeline
		- MapRazorComponents<App>() maps components to blazor
		- UseStaticFiles(); is responsible for mapping static resources
	- Static resources must be placed in the wwwroot folder
		- You can create subfolders (not-required, but necessary for organization)


Lesson 14 - 08/03/25 - 10:23 
Assignment 2: Create a Routable Component

Lesson 15 - 08/03/25
Assignment 2: Answer
	- Created a EditServers RoutableComponent Page at @page "/servers/edit"
	- Setup a link next to each server listing on the Servers.razor page
	- Setup a link in the Nav Menu for going to the Servers.razo page

Lesson 16 - 11:11
Route Parameters & Route Constraints
	- Set the parameter for the page as follows
		@page "/servers/{id}"
		The {param:int} can be anything as long as it matches the Parameter set in the code block
		 :int sets the parameter type in the url
	- [Parameter]
	  public int? Id {get; set;}
	  Paremeters must be marked with a [Parameter] attribute in the code block to designate them as a parameter for the component

	- Some parameters can be optional @page "/servers/{name?}"
		This will resolve even if a name is not specified


Lesson 17 - 08/03/25 11:28
Use OnParameterSet to receive parameter value

	We need to use the parameter value that is specified when visiting the page (load server information for selected server Id)

	There is one life cycle even that is triggered when the Component receives the parameter value

	override OnParameterSet() is triggered when the component receives the param value from the UR
	protected override Task OnParameterSetAsync is used for Asynchronous tasks


Lesson 18 - 08/03/25 11:55
Use Form and input components to display and collect data

	Instead of using plaing html form elements and building pages.
	We use Microsoft built in Blazor Form Components
		<EditForm> - This has components built in like.
			<InputText>
			<InputNumber>
			<InputCheckbox>
	Speficy the Model reference with Model=" "
		In this case, we are referencing the server that is specified in the @code {} in the component, which is an instance of the model

	We use @bind-Value (Must have uppercase "V" on Value)
		- This will bind the value of the specified Object to the field
			@bind-value="server.Name"

Lesson 19 - 08/03/25 12:33
Form Submission and model binding
	How to submit data
	Blazor SSR is like other web application when it comes to form submission

When the user clicks submit, the form field and it's values are submitted back to the server (packed together as HTTP Request)
The Server processess the HTTP Request
	There are two important features
	The Function (event)
	The Parameters (variables)

	All Edit Forms are required to have a form name (this is a component parameter)
		FormName="formServer"
	Need to specify an eventhandler
		OnSubmit="Submit" - This is a function defined in the @code{} block

	How Do you set properties for Form Submission

	Any variable that is being submitted needs to be set as a property {get; set;}
	It needs the Parameter heading type of
	[SupplyParameterFromForm]

	If we have multiple forms, each form needs to have it's own name
		Inside the SupplyParameterFromForm property, specify the form name 
		[SupplyParameterFromForm(FormName = "formServer")]

	If the object being submitted already has value being populated, to make sure its value is not populated again on submission
			
			server ??= LogicHere
		
		This sets the static repository to only populate if the server is null
		If the server is not null, the right-hand operation assignment will be skipped (assignment logic not executed)

		To bind the reference to the specific server for updating, we need to add a reference field to the ID. Since we don't want it changed it can be hidden. I don't know if it needs also be protected.
			<InputNumber @bind-Value="server.ServerId" hidden></InputNumber>


Lesson 20 - 08/03/25 1:22
Form Validations
	Use Data Annotations which are a part of C# to define data requirements in the model.
		using System.ComponentModel.DataAnnotations;
		There are a number of different DataAnnotation Attributes that can specified for each property.

	In the EditFrom Component
		OnValidSumbit="Submit" - This needs to be OnValidSubmit
		<DataAnnotationsValidator> Component needs to be included
		<ValidationSummary> Component needs to be included

	The C# validator formatting will automatically display when an invalid value is submitted
	A warning will be prompted with the appropriate feedback
	
	To position the field validation message next to the fields
		<div class="col">
			<ValidationMessage For="() => server.Name"></ValidationMessage>
		</div>
	Add a class="col" to give the validation message a section inside of the row
	Use the <ValidationMessage> component
	Parameter is defined by an anonymous function "() => server.Name"  where you reference the specific property you are validating


Lesson 21 - 08/03/25
Navigation with NavigationManager & Dependency Injection
	When the user clicks on the submit button, we want to take them back to the Manage Server Screen
	Second Step
	- We need to @inject NavigationManager 

	We don't instantiate instances or objects in a class, because we don't want to have a dependency or manage their lifecycle
		- We don't want to have to instantiate the class, or dispose of it (Improper disposal could cause a memory leak)
		- We Inject the Component or Class with an instance of the class, but the component itself is not managing the instance
			- We want the component and instantiated class to be "loosely coupled" so things don't break if the component or class change
			- The Instance of the class comes from somewhere else, and "injected" into the component
			- The lifespan of the class is handled else where.
			?? Where ??
				- The Framework knows the definition and manages the lifespan of the class 
				- The DI Container (Dependency Injection Container)
					- Knows the definition and the lifespan of the class
				- We register the dependencies like the NavMng in Program.cs
					- The DI Container is the Service Collection (Denoted in builder.Services in the Program.cs)
						Example: builder.Services.AddRazorComponents();
					Inside the Services Manager Definition
					services.TryAddSingleton - This means there is only one instance of this class running within the lifetime of the application
					TryAddScoped - This lives as long as the SignalR channel for server interactivity
				- When we are done using it, the service cleans up the instance for us

Lesson 24 - 08/07/25
Use EditForm to delete data

	(The below is a sample function that will actually not work, because it does not provide interactivty. Reviewed in video to show why forms are needed)
		- We can bind a component function called DeleteServer(serverId) to the server we want to delete using it's ServerId
			@onclick=" @( () => {DeleteServer(server.ServerId); })">Delete
			bind onclick event " @explcit anonymous function goes to the component function, which calls the server interface"
		- We then call the ServersRepository.DeleteServer(serverId) from the interface, to delete the server from the server list
	We need to use an <EditForm> component to handle the submission
		- Requires a Model="server"
		- Requires a UNIQUE form name.
			FormName="@($"form-server-{server.ServerId}")"
				The app requires a uniqueId for each form, so we use the ServerId from each server instance, which is always unique
		- Requires OnValidSubmit="@( () => {DeleteServer(server.serverId); })"
			This is so the component and application knows what to do on submit (I think?)
	We use EditForm instead of <a> because EditForm is an HTTP post.
		It hides data, where the <a> shows URL and data in the html and browser data.

	