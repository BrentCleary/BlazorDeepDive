Blazor Server Application Notes - 08-02-25
https://www.udemy.com/course/blazor-deep-dive-from-beginner-to-advanced/learn/lecture/42460400#overview


Section 1
Introduction


LESSON 4

app.Run() - This runs the application in a loop, listening for httpRequests coming in


app.UseHttpsRedirection();

app.UserStaticFiles();
app.UseAntiforgery();

app.MapRazorComponents<App>();

When an httprequest comes in, these functions (called middleware) add things to the request or handles the request with certain functionality


app.MapRazorComponents<App>(); - This maps the HTTP request to the <App> Class


App.razor is a plain html page, except that it has a 
<Routes /> 	   Component
<HeadOutlet /> Component


All Requests that come into the app are routed to the <App> Class component.
It is the Root component of the application
This is the "Single Page" of the Single Page Framework of Blazor

This page now uses the 
<Routes /> component
To find corresponding components, and place them in the <App>.razor body


Routes.razor hols the <Router> Component
The <Router> Component finds the Component you have requested and applies the Master Layout, which produces a final HTML Result, and returns it to the App.Razor


***** ----- .razor means any file this extension is a razor component ----- *****

PROCESS ROUTE

HTTPS Request Mapped to App.razor
App.Razor HTML calls Routes.Razor
Routes.Razor uses <Router> Component to find the requested Component ("Weather", "Other")
	Applies MainLayout to the Page Component
	Component fills in the @Body part of the MainLayout
This is returned to the App.Razor component and displayed


LESSON 5: Link to the Source Code


Section 2
Blazor SSR

LESSON 6: Two Types of Components

Two Types of Components

	- Routable Component - This component acts like page.
		These components can be located by the <Router /> component and palced in the Root Component (App.razor)
		The single most important thing making a Component Routable
			@page "/servers" directive is on the top


	- Non-Routable Component (Reusable Component)
		Can be used inside of each Routable component
		Can be used inside of other Non-Routable Components

		These will be called "Controls" and stored in the Controls folder in this course


	- _Layout.razor - This is the application wide @using reference. Placing the folder directory in this will allow all apps to access the contained components without referencing the entire namespace or importing the using reference on each page or component.


08/02/25 - 1:13
Lesson 7 -Razor Syntax Implicit Razor Expression

 - This lesson covers creating and referncing model and information.
 - Models folder created
 - Server model created with ServerID, Name, City, IsOnline created
 - Server Initialization properties set to make IsOnline correlate to a random number (0, 1) that is set when instantiated
 - Server 1 instance created in Routable Server Component Page
 - Server 1 properties set to display in Non-Routable Server Component.
	Server 1 properties set to attributes of HTML element properties (div data-name="server.Name")

08/02/25 - 1:49
Lesson 8 - Explicit Razor Expression
	- Explicit Razor expression allow for complex .net code to be run in html
		style="@($"color:{(server.IsOnline ? "green":"red")}")"

08/03/25 - 2:07
Lesson 9 - Create a static data Repository
	- .txt file of basic Server Class List
		- Server Crud operations included
			- Spelling error in GetServres() method, not corrected by instructor yet
	- Covering of importated methods for Server repository
	- Short video

08/03/25 - 08/02/25 2:20
Lesson 10 - Razor Syntax Output list with looping

08/02/25 - 2:34
Lesson 11 - Assignment - Loop over CitiesRepository to generate button list
	- Copy CitiesRepository Class from video. No .txt provided. Very simple and short.
	- Create a state variable in the Non-Routable Compononent Servers
	- Loop over the cities list and place the @city in a <button> tag

08/02/25 - 3:05
Lesson 12 - Assignment 1: Answer


08/03/25 - 10:12 
Lesson 13 - Working with Static Resources
	- Static Resources are mapped directly to the resource, not the components that are routed or called
	- App Object configures the middleware pipeline
		- MapRazorComponents<App>() maps components to blazor
		- UseStaticFiles(); is responsible for mapping static resources
	- Static resources must be placed in the wwwroot folder
		- You can create subfolders (not-required, but necessary for organization)


Lesson 14 - 08/03/25 - 10:23 
Assignment 2: Create a Routable Component

Lesson 15 - 08/03/25
Assignment 2: Answer
	- Created a EditServers RoutableComponent Page at @page "/servers/edit"
	- Setup a link next to each server listing on the Servers.razor page
	- Setup a link in the Nav Menu for going to the Servers.razo page

Lesson 16 - 11:11
Route Parameters & Route Constraints
	- Set the parameter for the page as follows
		@page "/servers/{id}"
		The {param:int} can be anything as long as it matches the Parameter set in the code block
		 :int sets the parameter type in the url
	- [Parameter]
	  public int? Id {get; set;}
	  Paremeters must be marked with a [Parameter] attribute in the code block to designate them as a parameter for the component

	- Some parameters can be optional @page "/servers/{name?}"
		This will resolve even if a name is not specified


Lesson 17 - 08/03/25 11:28
Use OnParameterSet to receive parameter value

	We need to use the parameter value that is specified when visiting the page (load server information for selected server Id)

	There is one life cycle even that is triggered when the Component receives the parameter value

	override OnParameterSet() is triggered when the component receives the param value from the UR
	protected override Task OnParameterSetAsync is used for Asynchronous tasks


Lesson 18 - 08/03/25 11:55
Use Form and input components to display and collect data

	Instead of using plaing html form elements and building pages.
	We use Microsoft built in Blazor Form Components
		<EditForm> - This has components built in like.
			<InputText>
			<InputNumber>
			<InputCheckbox>
	Speficy the Model reference with Model=" "
		In this case, we are referencing the server that is specified in the @code {} in the component, which is an instance of the model

	We use @bind-Value (Must have uppercase "V" on Value)
		- This will bind the value of the specified Object to the field
			@bind-value="server.Name"

Lesson 19 - 08/03/25 12:33
Form Submission and model binding
	How to submit data
	Blazor SSR is like other web application when it comes to form submission

When the user clicks submit, the form field and it's values are submitted back to the server (packed together as HTTP Request)
The Server processess the HTTP Request
	There are two important features
	The Function (event)
	The Parameters (variables)

	All Edit Forms are required to have a form name (this is a component parameter)
		FormName="formServer"
	Need to specify an eventhandler
		OnSubmit="Submit" - This is a function defined in the @code{} block

	How Do you set properties for Form Submission

	Any variable that is being submitted needs to be set as a property {get; set;}
	It needs the Parameter heading type of
	[SupplyParameterFromForm]

	If we have multiple forms, each form needs to have it's own name
		Inside the SupplyParameterFromForm property, specify the form name 
		[SupplyParameterFromForm(FormName = "formServer")]

	If the object being submitted already has value being populated, to make sure its value is not populated again on submission
			
			server ??= LogicHere
		
		This sets the static repository to only populate if the server is null
		If the server is not null, the right-hand operation assignment will be skipped (assignment logic not executed)

		To bind the reference to the specific server for updating, we need to add a reference field to the ID. Since we don't want it changed it can be hidden. I don't know if it needs also be protected.
			<InputNumber @bind-Value="server.ServerId" hidden></InputNumber>


Lesson 20 - 08/03/25 1:22
Form Validations
	Use Data Annotations which are a part of C# to define data requirements in the model.
		using System.ComponentModel.DataAnnotations;
		There are a number of different DataAnnotation Attributes that can specified for each property.

	In the EditFrom Component
		OnValidSumbit="Submit" - This needs to be OnValidSubmit
		<DataAnnotationsValidator> Component needs to be included
		<ValidationSummary> Component needs to be included

	The C# validator formatting will automatically display when an invalid value is submitted
	A warning will be prompted with the appropriate feedback
	
	To position the field validation message next to the fields
		<div class="col">
			<ValidationMessage For="() => server.Name"></ValidationMessage>
		</div>
	Add a class="col" to give the validation message a section inside of the row
	Use the <ValidationMessage> component
	Parameter is defined by an anonymous function "() => server.Name"  where you reference the specific property you are validating


Lesson 21 - 08/03/25
Navigation with NavigationManager & Dependency Injection
	When the user clicks on the submit button, we want to take them back to the Manage Server Screen
	Second Step
	- We need to @inject NavigationManager 

	We don't instantiate instances or objects in a class, because we don't want to have a dependency or manage their lifecycle
		- We don't want to have to instantiate the class, or dispose of it (Improper disposal could cause a memory leak)
		- We Inject the Component or Class with an instance of the class, but the component itself is not managing the instance
			- We want the component and instantiated class to be "loosely coupled" so things don't break if the component or class change
			- The Instance of the class comes from somewhere else, and "injected" into the component
			- The lifespan of the class is handled else where.
			?? Where ??
				- The Framework knows the definition and manages the lifespan of the class 
				- The DI Container (Dependency Injection Container)
					- Knows the definition and the lifespan of the class
				- We register the dependencies like the NavMng in Program.cs
					- The DI Container is the Service Collection (Denoted in builder.Services in the Program.cs)
						Example: builder.Services.AddRazorComponents();
					Inside the Services Manager Definition
					services.TryAddSingleton - This means there is only one instance of this class running within the lifetime of the application
					TryAddScoped - This lives as long as the SignalR channel for server interactivity
				- When we are done using it, the service cleans up the instance for us

Lesson 24 - 08/07/25
Use EditForm to delete data

	(The below is a sample function that will actually not work, because it does not provide interactivty. Reviewed in video to show why forms are needed)
		- We can bind a component function called DeleteServer(serverId) to the server we want to delete using it's ServerId
			@onclick=" @( () => {DeleteServer(server.ServerId); })">Delete
			bind onclick event " @explcit anonymous function goes to the component function, which calls the server interface"
		- We then call the ServersRepository.DeleteServer(serverId) from the interface, to delete the server from the server list
	We need to use an <EditForm> component to handle the submission
		- Requires a Model="server"
		- Requires a UNIQUE form name.
			FormName="@($"form-server-{server.ServerId}")"
				The app requires a uniqueId for each form, so we use the ServerId from each server instance, which is always unique
		- Requires OnValidSubmit="@( () => {DeleteServer(server.serverId); })"
			This is so the component and application knows what to do on submit (I think?)
	We use EditForm instead of <a> because EditForm is an HTTP post.
		It hides data, where the <a> shows URL and data in the html and browser data.
		People can find the "DeleteServer" Url and visit it to delete data. You can build in security, but the EditForm obscures the url entirely.



Section 3
Add Server Interactivity


Lesson 28 : 08/19/25 12:22
Use Enhanced form handling in Blazor SSR for interactivity
	How do you load dynamic and responsive elements in 
	Enhanced form handling helps make a form dynamic
	
	Using the EditForm Model
	- Supply Model="server" as parameter
	- Give the from a name for the app to reference. Can be anything as long as it's unique. serverComponentForm
	- OnSubmit="ChangeServerStatus" - This is the function we will call on Submit. We supply this in the @code{} block
		- This will toggle the server.IsOnline status, or any parameters provided

	- All the other elements of the server Model need to be provided and bounded, so the model update is complete.
		<InputNumber @bind-Value="server.ServerId" hidden></InputNumber>
			- This will identify the serverId and keep the parameter hidde
		<InputText @bind-Value="server.Name" hideen></InputText>
        <InputText @bind-Value="server.City" hidden></InputText>
        <InputCheckbox @bind-Value="server.IsOnline" hidden></InputCheckbox>
	- All of these fields are bound and submitted, then the ChangeServerStatus() method is called, and updatest the server status on Submit

	The page as describe above, will trigger a refresh on submit, and reload the page.
	This is not interactive

	Place the parameter Enhance="true" in the EditForm Component, and the form will rerender in place, updating just the component model


Lesson 30 - 08/09/25 1:27
Enable Server Interactivity how to make a component interactive

We are going to acheive interactivity without using Enhance="true" as an <EditForm> property

	- After the onclick="" method is added to the button elements,
		<button type="button" class="btn btn-primary" @onclick="ChangeStatus">Turn On/Off</button>

	- and the method is created in the @code{}
		private void ChangeStatus()
		{
			if(server != null)
			{        
				this.server.IsOnline = !this.server.IsOnline;
			}
		}

	In Program.cs
		- Add .AddInteractiveServerRenderMode(); to the app.MapRazorComponents<App>()
			app.MapRazorComponents<App>()
			.AddInteractiveServerRenderMode();

		- Add .AddInteractiveServerComponents(); to the builder.Services.AddRazorComponents();
			builder.Services.AddRazorComponents().AddInteractiveServerComponents();

		- Add @rendermode="InteractiveServer" to the ServerComponent where it is being called
		    <ServerComponent @rendermode="InteractiveServer"></ServerComponent>


	Steps Summarized
		1. Add .AddInteractiveServerRenderMode(); to the app.MapRazorComponents<App>()
		2. Add .AddInteractiveServerComponents(); to the builder.Services.AddRazorComponents();
		3. Add @rendermode="InteractiveServer" to the ServerComponent where it is being called

Lesson 31 - 08/09/25 1:50
Interactivity Location

	Interactivity Location refers to the places you can add Interactivity as a parameter

	There are two different places you can set interactivity on a component
	1. On the page in the parent component (At the top with the @using statements
		- Specifying the rendermode on the will set all sub components to Interactive
		- Inside the component when it is called
			- <Component  @rendermode="InteractiveServer"></Component>
		- Inside the component, which will apply  @rendermode="InteractiveServer" to all subcomponents it calls on

	2. Global Level - Inside App.razor
		- <Routes @rendermode="InteractiveServer" />"
		This will set the interactive servertype for all components called in Routes, and therefore across the entire application.

	Recommended by Microsoft is to use the first type, and apply rendermode to specific components at different and specific levels
		The reason you want specificty in rendermodes is
			You can enable WebAssembly Interactivty on components for different rendering types
			Specifying where the component is used is the versatile


Lesson 32 - 08/09/25 2:15
Server Interactivity in Visual Studio project template
	Server interactivity and be selected and needs to be selected at project creation
	If you want server interactivty, you need to select
		Server
			This will add the two server interactivity lines in Program.cs and all components that are generated
		This will only generate for interactive pages
	Setting server serverintercativty and selecting Global will place the @rendermode="serverinteractivity" on the <Routses /> component

Lesson 33 - 08/09/25 2:33
.NET 9 Updates: Include SSR in Global Server Interactivity location

	This is for .NET 9
	Server interactivity does not depend on cookies
	If you want something to function with cookies
		You have to set it to StaticServerSideRendering
			You can exclude certain renderable components to use staticserversiderendering
			It must be a Routable (Page) Component
		@attribute [ExcludeFromInteractiveRouting]

	At the App.razor component, you need to paste the following code below the html

	@code{
		[CascadingParameter]
		private HttpContext HttpContext {get; set;} = default!;

		private IComponentRenderMode? PageRenderMode
		=> HttpContext.AcceptsInteractiveRouting() ? InteractiveServer : null;
	}

	<HeadOutlet @rendermode="@PageRenderMode" />
	<Routes @tendermode="PageRenderMode" />

	These need to be set in the App.razor component as well

	The component will look for the render mode, and look for @attribute [ExcludeFromInteractiveRouting]
	If the attribute is found, it will return Null for the rendermode
		else it will return ServerInteractivity


Lesson 34 - 08/09/25 2:53
Three main aspects of interactive components

	Once you use interactive components in Blazor, this is a "Stateful" application, because you have established a SignalR channel with the server
		This is as opposed to a traditional application, which makes independent requests

	Flow of interaction
	User Interaction 
		[View] > [Event] > [State] >>> [View] 
		[View] >[E] > [S] >>> [V][E[S] > [VES]

		In our ServerComponent.razor component
			- html is the				[View]
			- Server? server var is the [State]
			- ChangeStatus() is the		[Event]


Lesson 35 - 08/09/25 3:44
Event Handling (Passing Data)

	To pass the variable  city  that is being referenced into the foreach loop in the city view container
	- Create the function SelectCity(string cityName){}
	- Call it with an anonymous funciton in the @onclick="" event
		@onclick="@( () => {SelectCity(); } )"

	View is now set
	Event Handling is set
	Event Handler is going change the state variable

	We need to declare the state variable
	We create function SelectCity(string cityName)
		This function sets the selectedCity value to the value clicked in view
		Then it sets the servers value to the Servers of the selectedCity
			This will cause the view to reload and display the servers of the selectedCity


Lesson 36 08/09/25 4:10
Assignment 4: Highlight current City

	Set the selected city image or card container to be highlighted when selected
	Keep in mind serverinteractivity as the primary focus of the lesson.
	Instructor will be using bootstrap to achieve highlighting visual effect.


Lesson 37 08/09/25 6:40
Assignment:  4 Answer

	Adding this case to the div will set conditional rendering for the border of the card if the   city   variable matches the selectedCity parameter
	<div class="card @(selectedCity.Equals(city, StringComparison.OrdinalIgnoreCase) ? "border-primary" : "")" >


Lesson 38 08/089/25 7:00 PM
Update, state variables with Onchange event

	To search by Server, we are going to collect a filter parameter in a FormControl input box
		This parameter is stored in a state variable called serverFilter
		This variable is assigned by a function call
			@onchange
			which passes the container of the input box as an "args" object.
		The function
			@onchange function is assigned HandleServerFilterChange
			which automaticlly assigns the args.Value to the serverFilter variable

	The Search button is assigned a 
		@onclick
		event with the function "HandleSearch"
		HandleSearch() assigns the static servers parameter the value that is returned from the 
			ServerRepository.SearchServers function
				This function takes a value and passes it into a linq query, returning a list of all matching servers from the servers list
		
		The servers state variable then updates to show only the servers with matching values to the search field
		selectedCity is also updated. The value is set to an empty string, as it is not longer reflecting a single city (servers from multiple cities can be returned)
	
Lesson 39 08/09/25 7:33 pm
Two Way Data Binding

	Two way Data Binding binds changes in the view to the state, and makes the event unncessary
	In the Search Box Element
		We place @bind-value="serverFilter"
		- This is different because the "v" in "value" is lowercase

		** Use Capitol V in EditForm
			@bind-Value="variable"
		** User lower v in other places
			@bind-value="variable"
	Behind the scenes, Blazor is handling the onchange="" event for us.

	- Using this getter setter format, we can setup responsive searching
	    private string _serverFilter = "";
		private string serverFilter {
			get => _serverFilter;
			set
			{
				_serverFilter = value;
				this.servers = ServersRepository.SearchServers(_serverFilter);
			}
		}

		
	Adding these parameters to the search function, specifically @bind-value:event="oninput", allows the filter to be set on each input in the field
		<input type="text" class="form-control" placeholder="Search Servers" 
        @bind-value="serverFilter" 
        @bind-value:event="oninput" />
	

Lesson 40 08/09/25 8:05pm
Interactive Edit Form
	
	Anything without a rendermode attribute is using Blazor SSR (Server Side Rendering)
	When you have form interactivity
		You don't need the FormName=""
		You don't need to [SupplyParameterFromForm]
	When the routable component becomes interactive
		The EditForm component becomes interactive as well
			When the submit button is clicked, the form is no longer submitted back to the server
			Messages are sent throught SignalR channel and Submit is triggered on submisison
	
	We also have Databinding
		All of the datavalue is automatically reflected (updated) in the state variable


Lesson 41 08/09/25 8:16pm
Use @key to improve list-rendering performance

	Putting @key in a the <li> or <table> element in Blazor assigns a unique key to the element
		Blazor does not allow duplicate keys
	When an element is added or updated, it will be updated by it's key, and will only update that element
		This allows new items in a list to be loaded without reloading the whole list, which could be thousands

	@foreach(var server in servers)
    {
        <li @key="server.ServerId" >

	Keys are always recommended to identify the items


Lesson 42 08/09/25 8:31
Use Virtualization to improve list-rendering performance

	This technique is used to improve the performance of rendering
	Requirements:
	1. Used to replace a foreach loop when there are two many items
	2. The items being listed are the same height
	3. Likely more than 200 items

	To use it, remove the foreacha nd replace it with <Virtualize></Virtualize> with the item to loop over inside

	<Virtualize Items="this.servers" Context="server">
		<li> Item </li>
	</Virtualize>

	We have to define the item to virtualize (loop over) and provide the context (static variable)
	Virtualize will only display the most recent items, and not load all 1000, but will update when you scroll to view

	It knows the height of the item, and the size of the viewpoint, and only renders what can be seen.

	** At this point in tutorial, Search function is not working for servers added over the intial 16


Section 4
Course Project (Part-1): To-Do List App Basics


Lesson 43 : 08/10/25
Requirement of To do list app

	- Video overview of To Do List Application


Lesson 44: 08/11/25
Display a list of tasks use case

	- Create new ""ToDoApp" Project inside of "BlazorDeepDive" Solution
		- Add .AddInteractiveServerComponents() in Program.cs to builder.Services.AddRazorComponents()
		- Add .InteractiveServerRenderMode()	in Program.cs to app.MapRazorComponents<App>()

	- Create "ToDoItem"
	- Create "ToDoItemRepository" based on ServerRepository. Copy more specifc code from video as they are not completely identical.

Lesson 45 08/12/25 8:45pm
Add Task Use Case

	- Add a button to the To Do List page
	- Basic styling
	- onclick="AddTask"
		In @code{} block
		private void AddTask(){
			ToDoItemsRepository.AddItem(new ToDoItem { Name = "New Task" });
		}
	- Add @rendermode InteractiveServer functionality
	- Reload the items list inside the AddTask() function to update the list


Lesson 46 08/13/25 7:08pm
Input Task Name Use Case
	
	- Create an <input> element to add a name to the item.Name instead of just displaying the default name
	- Add class="form-control border-0" to make the input boxes
	- Use @bind-value="item.Name" to bind the name to the object
		- This is two way binding and will update the memory, retaining the name over the life of the application run time (no permanent retention)


Lesson 47 08/13/25 7:16 pm
Mark task as completed Use Case

	- We need to display the checkbox, allow the user to mark it as completed or uncompleted, and display the date
	- Add a "row" bootstrap element to the container <div>
		- Add 3 <div> with a class="col" inside the row div
			                <div class="row mb-2">
                    <div class="col-1">
                        <input type="checkbox"
                            class="form-check-input"
                            @bind-value="item.IsCompleted"
                            checked="@item.IsCompleted"/>
                    </div>
                    <div class="col">
                        <input type="text" class="form-control border-0" @bind-value="item.Name" />
                    </div>
                    <div class="col">
                        @if (item.IsCompleted)
                        {
                            <text>Completed at: @item.DateCompleted.ToLongDateString()</text>
                        }
                    </div>
                </div>

		<div> 1 will display our checkbox, and bind the value of the checkbox to the element.
		<div> 2 will bind the item name
		<div> 3 will display the date completed, if the items IsCompleted Bool is true.

		- Adding class="list-unstyled" to the <ul> element containing the list will remove the bullet point styling

		Implement {get; set;} functionality for IsComplete and _isComplete properties, and link to update DateCompleted Property



Section 5
Non-Routable Razor Component Deep-Div


Lesson 48 08/14/25
Thinking in Components

	Single Responsibility Principle - As with classes, one Component should exist for only one reason
		- We will be breaking down larger components into individual responsiblity components in the next videos


Lesson 49 08/19/25
Extract the ServerList Component

	- Virtualize and the html elements and logic are pulled from the Servers.razor page, and placed in their own component.
		- ServerListComponent.razor
		- Debug all errors and bring the necessary Server functions and variable references into the code.
		- Comment out any functionality that is throwing an error in the Servers.razor component. They can be updated later.
	- The new component needs NavigationManager injected
	- The component is now placed inside the Servers.razor page
		- rendermode="InteractiveServer" must be called in the component html element (not the component itself) to get realtime rendering
	- At this point, the page is re-rendering with NavigationManager, which is not interactivity, but this will be fixed in a later video

Lesson 50 08/19/25
Use Component Parameters to communicate from parent to child components

	- When selecting a city in the Servers.razor page component(Parent)
		- We need to pass the city to the ServerListComponent.razor(Child) to display the servers from that city
	To pass the city value
		- We declare parameter public string? CityName { get; set; } in the ServerListComponent.razor
			[Parameter] needs to be declared over the variable to designate it as a Parameter for the component
	In Servers.razor, declare the Pararmeter as
			CityName="Halifax"
		in the component html. This will pass the value into the component.

	Use:
		protected override void OnParametersSet()
		{
			servers = ServersRepository.GetServersByCity(CityName);
		}
	to get the parameter value from the parent, and pass it's value into the servers variable.
	Remove the assignment from the variable declaration, and set the variable type to be nullable
		private List<Server?> servers;
	Put an if(servers != null) check around the component html to avoid null errors.
	Add (CityName ?? "Toronto"); to the parameter for GetServersByCity() to default to Toronto if the value is null.

	- In Servers.razor
		- Set the CityName Parameter for the ServerListComponent.razor to @this.selectedCity (the variable previously declared in the parent component)
			This will update the CityName Parameter, and update the ServerListComponent.razor server listings interactively 
